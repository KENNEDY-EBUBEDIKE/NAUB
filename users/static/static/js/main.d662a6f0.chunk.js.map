{"version":3,"sources":["page2-images/BBI.jpg","page2-images/BBD.jpg","page2-images/BBC.jpg","page2-images/CCC.jpg","page2.js","index.js"],"names":["App2","className","RootComponent","Fragment","ReactDom","render","document","getElementById"],"mappings":"2KAAe,ICAA,ICAA,ICAA,I,MC8ER,SAASA,IACZ,OACI,qBAAKC,UAAW,cC3DxB,SAASC,IACL,OACI,cAAC,IAAMC,SAAP,UAUI,cAACH,EAAD,MAgCZI,IAASC,OACL,cAACH,EAAD,IACAI,SAASC,eAAe,U","file":"static/js/main.d662a6f0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/BBI.a95971ad.jpg\";","export default __webpack_public_path__ + \"static/media/BBD.b08f5ea7.jpg\";","export default __webpack_public_path__ + \"static/media/BBC.e63333ec.jpg\";","export default __webpack_public_path__ + \"static/media/CCC.0ba8d88b.jpg\";","import React from 'react'\nimport './page2.css'\n\nimport image0 from \"./page2-images/BBI.jpg\"\nimport image1 from \"./page2-images/BBD.jpg\"\nimport image2 from \"./page2-images/BBC.jpg\"\nimport image3 from \"./page2-images/CCC.jpg\"\n\n\n/**since components are functions, they can take parameters\nThe parameters are passed in as objects\nit can also take other items, which are passed in as 'children'\nThe 'children' must be passed using full opening and closing tags of the component(not self closing tage)*/\n\nfunction App(){\n    return(\n        <div className={'container'}>\n            <Profile image={image0} fullName={'okonkwo Chike obi'} job={'Developer'} age={26}>\n                {/* passing The children items\n                    Everything inside the open and close of the component is seen as children\n                */}\n                <p> This is children </p>\n                <p>Another child</p>\n            </Profile>\n\n            <Profile image={image1} fullName={'Adegoke adejumo '} job={'Analyst'} age={20} />\n            <Profile image={image2} fullName={'Ali Danladi Abubakar'} job={'Demographer'} age={24} />\n\n            <Profile image={image0} fullName={'okonkwo Chike obi'} job={'Developer'} age={26} />\n            <Profile image={image1} fullName={'Adegoke adejumo '} job={'Analyst'} age={20} />\n            <Profile image={image2} fullName={'Ali Danladi Abubakar'} job={'Demographer'} age={24} />\n\n            <Profile image={image0} fullName={'okonkwo Chike obi'} job={'Developer'} age={26} />\n            <Profile image={image1} fullName={'Adegoke adejumo '} job={'Analyst'} age={20} />\n            <Profile image={image2} fullName={'Ali Danladi Abubakar'} job={'Demographer'} age={24} />\n        </div>\n    )\n}\n\n/***\n *if the component is to be replicated multiple times with different props data,\n *  A better a approach can be to create an object of the props and create a list of all the objects\n * Then loop through the list by calling .map method on it to create the components with content of the list\n * instead of repeating the component the number of times we have the props\n */\n\n// list of objects of props\nconst profiles = [\n    {\n        image: image0,\n        fullName: 'okonkwo Chike obi',\n        job: 'Developer',\n        age:26\n    }, // object of  props\n\n    {\n        image: image1,\n        fullName: 'Adegoke adejumo Aderogba',\n        job: 'Analyst',\n        age:20\n    }, // object of  props\n\n    {\n        image: image2,\n        fullName: 'Ali Danladi Abubakar',\n        job: 'Demographer',\n        age:24\n    }, // object of props\n\n    {\n        image: image3,\n        fullName: 'Dogo Juliet Akura',\n        job: 'Software Tester',\n        age:21\n    }, // object of props\n]\n\n\nexport function App2(){ // named export\n    return(\n        <div className={'container'}>\n            {/*{profiles.map((profile)=>{*/}\n            {/*    return(*/}\n            {/*        // destructured using spread operator*/}\n            {/*        <Profile {...profile} >*/}\n\n            {/*        </Profile>*/}\n            {/*    )*/}\n            {/*})}*/}\n\n\n\n        </div>\n    )\n}\n\n\n\n//props is an object and can be destructured as an object\nconst Profile = (props)=>{\n    return(\n        <div className={'profile'}>\n            <img alt='' src={props.image}/>\n            <div className={'details'}>\n                <h4>{props.fullName.toUpperCase()}</h4>\n                <h5>{props.job}</h5>\n                <h5>{props.age} Years</h5>\n            </div>\n            {/* Accessing and placing the Children property*/}\n            {props.children}\n        </div>\n    )\n}\n\nexport default App // default export\n","/**\n * The index.js file is the entry point that must exist\n *\n * This file contains the react components\n * A component is declared as function with the first letter of the identifier capitalised.\n * it returns JSX (HTML code)\n * The component is then rendered to the root of the index.html file\n *\n */\n\nimport React from 'react'\nimport ReactDom from 'react-dom'\nimport './index.css'\n\nimport {App2} from './page2' // named export importation\n// import App from './page2' // default export importation\n\n\n// creating the component\n// More than 1 element cannot be returned. i.e everything to be returned must be inside one tag\n// Everything can also be enclosed in a react fragment\nfunction RootComponent(){\n    return(\n        <React.Fragment>\n            {/*<div>*/}\n            {/*    <h1>*/}\n            {/*        WELCOME TO THE WORLD OF REACT !!!*/}\n            {/*    </h1>*/}\n            {/*</div>*/}\n\n            {/*<Component2/>*/}\n            {/*<Component5/>*/}\n\n            <App2/>\n            {/*<App/>*/}\n\n        </React.Fragment>\n    )\n}\n\n/**Another way of creating react component\nThe .createElement params are the html tag, object of attributes for the tag, then content of the tag*/\n\n// function Component2(){\n//     return(\n//         React.createElement('React.Fragment', {}, [<Component3/>, <Component4/>])\n//     )\n// }\n\n\n\n/** Combining different components\n * components can be added into components\n * */\n\n// const Component3 = () => {return( <h1>REDUX</h1> )}\n// const Component4 = () => {return(<h1>HOOKS</h1>)}\n// const Component5 = () => {return(<h1>Router</h1>)}\n\n\n\n\n\n\n// rendering the component to the html\nReactDom.render(\n    <RootComponent/>,\n    document.getElementById('root')\n)"],"sourceRoot":""}
"""
Django settings for RFID_MGT project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from decouple import config
# kennedyeziechina@gmail.com

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["127.0.0.1",
                 "192.168.137.129",
                 "192.168.43.144",
                 "192.168.0.101",
                 '192.168.43.144',
                 '10.255.14.98',
                 ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'widget_tweaks',

    'graphene_django',
    'graphql_jwt.refresh_token.apps.RefreshTokenConfig',
    "graphql_auth",
    'django_filters',

    'session_security',
    'corsheaders',

    'rest_framework',

    'users',
    'staff',
    'students',
    'exams',

]

MIDDLEWARE = [

    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.security.SecurityMiddleware',

    'RFID_MGT.middleware.OneSessionPerUserMiddleware',  # my custom middleware handle one session per user


    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    'session_security.middleware.SessionSecurityMiddleware',  # external middleware handle session timeout

    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'RFID_MGT.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'RFID_MGT.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/


MEDIA_ROOT = BASE_DIR / 'media/'
STATIC_ROOT = BASE_DIR / 'static/'
STATIC_URL = '/static/'
MEDIA_URL = '/media/'

AUTH_USER_MODEL = 'users.User'
LOGIN_REDIRECT_URL = '/users/dashboard'
LOGOUT_REDIRECT_URL = '/users/login/'
LOGIN_URL = '/users/login/'
LOGOUT_URL = '/users/logout/'
CSRF_FAILURE_VIEW = 'users.views.csrf_failure'


# SESSION_COOKIE_AGE = 3600
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SECURITY_WARN_AFTER = 3000
SESSION_SECURITY_EXPIRE_AFTER = 3600


GRAPHENE = {
    'SCHEMA': 'RFID_MGT.schema.schema',
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ],
}

GRAPHQL_JWT = {
    'JWT_ALLOW_ANY_CLASSES': [
        'graphql_auth.mutations.ObtainJSONWebToken',
        'graphql_auth.mutations.VerifyToken',
        'graphql_auth.mutations.RefreshToken',
        'graphql_auth.mutations.RevokeToken',

    ],

    # how long the original token is valid for
    'JWT_EXPIRATION_DELTA': timedelta(hours=23),

    # allow refreshing of tokens
    'JWT_ALLOW_REFRESH': True,

    # this is the maximum time AFTER the token was issued that it can be refreshed. Expired tokens can't be refreshed.
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=1),

    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LONG_RUNNING_REFRESH_TOKEN': True,
}


GRAPHQL_AUTH = {
    "LOGIN_ALLOWED_FIELDS": ["email", "username"],
    "SEND_ACTIVATION_EMAIL": True,
    # optional fields on update account, can be list of fields
    "UPDATE_MUTATION_FIELDS": {"email": "String", "username": "String"},

    # if allow to login without verification,
    # the register mutation will return a token
    "ALLOW_LOGIN_NOT_VERIFIED": True,
    # mutations fields options
    "ALLOW_LOGIN_WITH_SECONDARY_EMAIL": True,
    # required fields on register, plus password1 and password2,
    # can be a dict like UPDATE_MUTATION_FIELDS setting
    "REGISTER_MUTATION_FIELDS": ["email", "username"],
    "REGISTER_MUTATION_FIELDS_OPTIONAL": [],

    # tokens
    "EXPIRATION_ACTIVATION_TOKEN": timedelta(days=7),
    "EXPIRATION_PASSWORD_RESET_TOKEN": timedelta(hours=1),
    "EXPIRATION_SECONDARY_EMAIL_ACTIVATION_TOKEN": timedelta(hours=1),
    "EXPIRATION_PASSWORD_SET_TOKEN": timedelta(hours=1),
}


AUTHENTICATION_BACKENDS = [
    "graphql_auth.backends.GraphQLAuthBackend",
    'django.contrib.auth.backends.ModelBackend'
]

#  DATABASE CACHING

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
#         'LOCATION': 'my_cache_table',
#     }
# }


#  Filesystem Caching
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/tmp/django_cache',
    }
}


'''  Deployment Configurations  '''
# # Redirects all Unsecure (HTTP) connections to HTTPS
# SECURE_SSL_REDIRECT = True
#
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
#
# # send only the origin addr(domain addr without subdomain) as referrer header when the link is outside this domain
# SECURE_REFERRER_POLICY = 'origin-when-cross-origin'
#
# # Filters Cross Site Scripting Attacks
# SECURE_BROWSER_XSS_FILTER = True
#
# # Forces the browser to use the specified contentType and not guessing it
# SECURE_CONTENT_TYPE_NOSNIFF = True
#
# # PreLoads the HSTS policy on the browser
# SECURE_HSTS_PRELOAD = True
#
# # Forces HSTS on all sub domains of the site
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
#
# # The browser will refuse Unsecure connection to the site for n seconds
# SECURE_HSTS_SECONDS = '1'
#
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


CORS_ALLOW_ALL_ORIGINS = True


# CORS_ALLOWED_ORIGINS = [
#         'http://127.0.0.1',
#     ]
#
#
# # For POST requests
# CSRF_TRUSTED_ORIGINS = [
#     'http://127.0.0.1',
# ]


# REST_FRAMEWORK = {
#     # Use Django's standard `django.contrib.auth` permissions,
#     # or allow read-only access for unauthenticated users.
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.DjangoModelPermissions'
#     ]
# }
